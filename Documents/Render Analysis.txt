...
Draw "device" depth (inverted) and stencil buffers (there's no pixel shaders here for the most part (there are for a couple materials, like vegetation? but they seem to be empty), just raw vertices)
...
Draw G-Buffers (Normals, Albedos, Specular/Metallicness, motion vectors (of dynamic objects only), "device" depth (inverted) and stencil again?) (first person character meshes draw around the end, likely with a different matrix)
Convert "device" inverted depth to linear depth (R32F) (this also maps it from the near 0 - far 1 range to a camera origin 0 - far 1 range)
Downsample depth buffer (half res, RGBA16F, with each channel representing max/min/average/tap, uses "DownsampleDepthPS")
Draw (deferred) decals
Downsample depth buffer (again? This one seems to make them even smaller)
Draws Screen Space Reflections buffer (Takes g-buffers and depth as source, uses "CBSSRRaytrace"/"SSRRaytracePS")
Downsample SSR buffers to different mip levels
Compose SSR textures to a final buffer usable later (uses "SSRCompositionPS")
Draw some dynamic shadow maps (cubemaps?)
Draw SSDO (SSAO) (uses "DirOccPassPS")
Blur SSAO (uses "SSDO_Blur_PS")
Downsample and blur albedo buffer (probably for SSDO Color Bleeding)
Draw some more stuff on the depth buffer
Draw "ClipVolumeBlendValue" (some kind of mask that goes into "ResolveStencil"?)
Draw "ResolveStencil" (this is for blur?)
Draw shadow mask (uses "DeferredShadowPS"/"ShadowMaskGenPS" and another vertex shader)
Draw volume lights (uses "CBVolumeLightListGen")
Composes g-buffers into a properly lit image (uses "TiledDeferredShadingCS", check "ssdoAmountDirect" and "DirectionalOccRT" for SSDO) (also check "ClusteredDeferredShadingPS", but it doesn't seem to be used)
Draw some volume lights
Draw Sub Surface Scattering Screen Space blur in two passes (uses "SSSSS_Blur", first on a separate texture, then it composes it back on the back buffer. The first texture isn't ever cleared and thus has trails of the previous frames, as it only draws a couple of objects that are relevant to it. It's probably fine as the pixels that weren't relevant to it aren't read back from it (supposedly, otherwise sub surface scattering would trail and change depending on the last camera movement))
Draw Eyes
Calculate exposure or something like that
Draw "post process" material stuff, like some late decals (probably emissive stuff drawn through Scaleform, like in world TVs/Monitors), glass, emissive surfaces, hair, fog, beams, light volumes, ...
Draw Motion Blur (uses "MotionBlurPS") (this copies the backbuffer from FP16 to FP11 and then from FP11 back to FP16, thus losing quality)
Some random decals on the first person camera models (e.g. weapons)
Calculate scene (auto) exposure (first it takes 64x64 samples from the a double downscaled backbuffer, then downscales that 3 times to 1x1)
Downscale buffers for bloom
Update LUT (e.g. apply contrast curves etc)
Apply Tonemap (HDR->SDR) (this also applied bloom, sun shafts, ...) (from here on, or soon after, we'll be writing on the swapchain texture directly)
Draw SDR screen space post process effects
AA edge detection stuff
Apply AA (FXAA, SMAA, SMAA temporal, SMAA temporal x2 (TAA), Luma DLSS)
Draw Lens Optics effects on the side
Apply Post AA (film grain, vignette, lens optics, ...)
Upscale if using dynamic resolution scaling (basically all the passes until now have been rendering to a partial resolution (on the top left) if DRS was on)
Apply Uber Game Post Process (when needed, chromatic aberration, sharpening, ...)
Draw UI
Present (output)

The game throws the following warning every frame (and possibly other) (none of these are bad really):
D3D11 WARNING: ID3D11DeviceContext::End: End is being invoked on a Query, where the previous results have not been obtained with GetData. This is valid; but unusual. The previous results are being abandoned, and new Query results will be generated. [ EXECUTION WARNING #410: QUERY_END_ABANDONING_PREVIOUS_RESULTS]
D3D11 WARNING: ID3D11DeviceContext::OMSetRenderTargets: Resource being set to OM RenderTarget slot 0 is still bound on input! [ STATE_SETTING WARNING #9: DEVICE_OMSETRENDERTARGETS_HAZARD]
D3D11 WARNING: ID3D11DeviceContext::OMSetRenderTargets[AndUnorderedAccessViews]: Forcing PS shader resource slot 1 to NULL. [ STATE_SETTING WARNING #7: DEVICE_PSSETSHADERRESOURCES_HAZARD]

This is thrown twice on boot, again, it's not a real error:
D3D11 WARNING: ID3D11Device::CreateInputLayout: The provided input signature expects to read an element with SemanticName/Index: 'POSITION'/0 and component(s) of the type 'int32'.  However, the matching entry in the Input Layout declaration, element[0], specifies mismatched format: 'R32G32_FLOAT'.  This is not an error, since behavior is well defined: The element format determines what data conversion algorithm gets applied before it shows up in a shader register. Independently, the shader input signature defines how the shader will interpret the data that has been placed in its input registers, with no change in the bits stored.  It is valid for the application to reinterpret data as a different type once it is in the vertex shader, so this warning is issued just in case reinterpretation was not intended by the author. [ STATE_CREATION WARNING #391: CREATEINPUTLAYOUT_TYPE_MISMATCH]